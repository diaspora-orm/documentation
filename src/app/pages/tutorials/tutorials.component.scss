@import '../../../scss/vars.scss';

$progress-color: $c1light;
:host {
	display: flex;
	flex-direction: column;
    height: 100vh;
    padding-top: $reducedHeaderHeight;
}

#toggle-text{
	position: absolute;
	right: 5px;
	padding: 10px;
	background-color: rgba(32,32,32,0.2);
	border: 1px solid #aaa;
	border-right-width: 0;
	border-top-left-radius: 5px;
	border-bottom-left-radius: 5px;
	top: 50%;
	transform: translateY(-50%);
	cursor: pointer;
	transition: 0.5s all;
	
	&.text-hidden{
		left: 0;
		right: auto;
		border-bottom-right-radius: 5px;
		border-top-right-radius: 5px;
		border-top-left-radius: 0;
		border-bottom-left-radius: 0;
		border-left-width: 0;
		border-right-width: 1px;
		
		.fa{
			transform: scaleX(-1);
		}
	}
}
#canvas-container {
	flex: 1 1 0;
	align-self: center;
	min-width: 400px;
	display: flex;
	justify-content: center;
	align-items: center;
}
#canvas{
	flex: 0 0 auto;
}
figcaption {
	flex: 0 1 100%;
	min-width: 200px;
	overflow: auto;
	position: relative;
	padding: 0 15px;
	text-align: justify;
}
:host ::ng-deep ngx-md > *{
	margin-bottom: 15px;
	border-left: 0 solid $progress-color;
	transition: 0.5s all;
	margin-left: 0;
	padding-left: 0;
	
	&.active{
		border-left-width: 5px;
		margin-left: -10px;
		padding-left: 5px;
	}
}

$cursor-height:10px;
#cursor {
	width: 0;
	height: 0;
	border-right: $cursor-height solid $progress-color;
	border-top: $cursor-height solid transparent;
	border-bottom: $cursor-height solid transparent;
	display: block;
	position: absolute;
	right: 0;
	top: 0;
	opacity: 0;
    transition: 0.5s top;
}

$foot-padding: 10px;
$meter-height: 5px;

@keyframes animate-shine { 
	0% {opacity: 0; width: 0;}
	50% {opacity: .5;}
	100% {opacity: 0; width: 95%;}
}




figure{
	margin: 0; 
	display: flex;
	flex-direction: row;
	justify-content: stretch;
	flex: 1 1 100%;
}



#resize-handle{
	border-left: 5px simple #333;
	cursor: ew-resize;
	position: relative;
	user-select: none;
	box-shadow: -2px 0 5px 1px #333;
}
.player-buttons{
    display: inline-flex;
	flex-direction: row;
	justify-content: space-around;
	align-items: center;
}
.player-button {
	font-size: 2rem;
	padding: 1.25rem;
	border-radius: 100%;
	width: 1em;
	height: 1em;
	line-height: 1em;
	box-sizing: content-box;
	background-color: $c1light;
	border-color: $c1dark;
	transition: all 0.5s;
	margin: 0.5rem;
	text-align: center;
	flex: 0 0 1em;
	
	&:hover{
		background-color: $c1dark;
		border-color: $c1light;
	}
}
footer {
	background-color: $c2dark;
	//    padding: 0.3rem;
	color: #ddd;
	//	padding: $meter-height + $foot-padding $foot-padding $foot-padding;
	text-align: center;
	line-height: 1rem;
}




















@import url(https://fonts.googleapis.com/css?family=Expletus+Sans);

/* Styling an indeterminate progress bar */

progress{
	cursor: pointer;
	margin: 0;
	
	&:not(value) {
		/* Add your styles here. As part of this walkthrough we will focus only on determinate progress bars. */
	}
	
	/* Styling the determinate progress element */
	
	&[value] {
		/* Get rid of the default appearance */
		appearance: none;
		
		/* This unfortunately leaves a trail of border behind in Firefox and Opera. We can remove that by setting the border to none. */
		border: none;
		
		/* Add dimensions */
		width: 100%; height: 20px;
		
		/* Although firefox doesn't provide any additional pseudo class to style the progress element container, any style applied here works on the container. */
		background-color: whiteSmoke;
		border-radius: 3px;
		box-shadow: 0 2px 3px rgba(0,0,0,.5) inset;
		
		/* Of all IE, only IE10 supports progress element that too partially. It only allows to change the background-color of the progress value using the 'color' attribute. */
		color: $c1light;
		
		position: relative;
		
		
		/*
		Webkit browsers provide two pseudo classes that can be use to style HTML5 progress element.
		-webkit-progress-bar -> To style the progress element container
		-webkit-progress-value -> To style the progress element value.
		*/
		
		&::-webkit-progress-bar {
			background-color: whiteSmoke;
			border-radius: 3px;
			box-shadow: 0 2px 3px rgba(0,0,0,.5) inset;
		}
		
		&::-webkit-progress-value {
            transition: width 0.5s;
            
			position: relative;
			
			background-size: 35px 20px, 100% 100%, 100% 100%;
			border-radius:3px;
			
			/* Let's animate this */
			animation: animate-stripes 5s linear infinite;
			
			/* Gradient background with Stripes */
			background-image:
			-webkit-linear-gradient( 135deg,
			transparent,
			transparent 33%,
			rgba(0,0,0,.1) 33%,
			rgba(0,0,0,.1) 66%,
			transparent 66%),
			-webkit-linear-gradient( top,
			rgba(255, 255, 255, .25),
			rgba(0,0,0,.2)),
			-webkit-linear-gradient( left, $c1light, $c1dark);
			
			/* Let's spice up things little bit by using pseudo elements. */
			
			&:after {
				/* Only webkit/blink browsers understand pseudo elements on pseudo classes. A rare phenomenon! */
				content: '';
				position: absolute;
				
				width:5px; height:5px;
				top:7px; right:7px;
				
				background-color: white;
				border-radius: 100%;
			}
		}
		
		/* Firefox provides a single pseudo class to style the progress element value and not for container. -moz-progress-bar */
		
		&::-moz-progress-bar {
            transition: width 0.5s;

			/* Gradient background with Stripes */
			background-image:
			-moz-linear-gradient( 135deg,
			transparent,
			transparent 33%,
			rgba(0,0,0,.1) 33%,
			rgba(0,0,0,.1) 66%,
			transparent 66%),
			-moz-linear-gradient( top,
			rgba(255, 255, 255, .25),
			rgba(0,0,0,.2)),
			-moz-linear-gradient( left, $c1light, $c1dark);
			
			background-size: 35px 20px, 100% 100%, 100% 100%;
			border-radius:3px;
			
			/* Firefox doesn't support CSS3 keyframe animations on progress element. Hence, we did not include animate-stripes in this code block */
			
			/* Gradient background with Stripes */
			background-image:
			-moz-linear-gradient( 135deg,
			transparent,
			transparent 33%,
			rgba(0,0,0,.1) 33%,
			rgba(0,0,0,.1) 66%,
			transparent 66%),
			-moz-linear-gradient( top,
			rgba(255, 255, 255, .25),
			rgba(0,0,0,.2)),
			-moz-linear-gradient( left, $c1light, $c1dark);
		}
	}
	
}

/* Fallback technique styles */
.progress-bar {
	background-color: whiteSmoke;
	border-radius: 3px;
	box-shadow: 0 2px 3px rgba(0,0,0,.5) inset;
	
	/* Dimensions should be similar to the parent progress element. */
	width: 100%; height:20px;
	
	span {
		background-color: royalblue;
		border-radius: 3px;
		
		display: block;
		text-indent: -9999px;
	}
}

p[data-value] { 
	
	position: relative; 
	
	/* The percentage will automatically fall in place as soon as we make the width fluid. Now making widths fluid. */
	
	&:after {
		content: attr(data-value) '%';
		position: absolute; right:0;
	}
}


@keyframes animate-stripes { 100% { background-position: -100px 0; } }


/* THE END */